//DFS
//Make a small graph and a adjacency matrix and then see the code will be easy to understand
//This works for disconnected components as well
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
void bfs(int **edges,int n,int sv,int *visited)
{   
   queue<int>q;
   q.push(sv);
   visited[sv]=1;
   while(!q.empty())
   {
      int curr=q.front();
      q.pop();
      cout<<curr<<endl;
   for(int i=0;i<n;i++)
   {
      if(visited[i]==0 && edges[curr][i]==1)
      {
          q.push(i);
          visited[i]=1;
      }
   }
   }       
}


void dfs(int **edges,int n,int sv,int *visited)
{   
    cout<<sv<<endl;
    visited[sv]=1;
    for(int i=0;i<n;i++)
    {
        if(visited[i]==0 && edges[sv][i]==1)
        {
            dfs(edges,n,i,visited);
        }
        
     }   
}

void bfsDriver(int **edges,int n)
{
    cout<<"BFS"<<endl;
    int *visited=new int[n];
    for(int i=0;i<n;i++)
    {
        visited[i]=0;
    }
    for(int i=0;i<n;i++)
    {
        if(visited[i]==0)
        {
        bfs(edges,n,i,visited);
        }
    }
}
void dfsDriver(int **edges,int n)
{
    cout<<"DFS"<<endl;
    int *visited=new int[n];
    for(int i=0;i<n;i++)
    {
        visited[i]=0;
    }
    for(int i=0;i<n;i++)
    {
        if(visited[i]==0)
        {
        dfs(edges,n,i,visited);
        }
    }
}
int main() 
{
   int n,e;
   cin>>n>>e; 
   int sv,ev; 
   int **edges=new int*[n];
for(int i=0;i<n;i++)
{
        edges[i]=new int[n];
        for(int j=0;j<n;j++)
        {
            edges[i][j]=0;
        }
}
for(int i=0;i<e;i++)
   {
       cin>>sv>>ev;
       edges[sv][ev]=1;
       edges[ev][sv]=1;
   }
   dfsDriver(edges,n);
   bfsDriver(edges,n);
}
