#include <iostream>
#include<bits/stdc++.h>
using namespace std;
void dfs(int **edges,int n,int *visited,int v1,int v2,int *parent)
{
   //Base case
   if(visited[v1]==1)
   {
      return;
   }
    visited[v1]=1;
    for(int i=0;i<n;i++)
    {
        if(visited[i]==0 && edges[v1][i]==1)
        {
            parent[i]=v1;
            dfs(edges,n,visited,i,v2,parent);
        }
        
     }   
}
int main() 
{
   int n,e;
   cin>>n>>e; 
   int sv,ev; 
   int **edges=new int*[n];
for(int i=0;i<n;i++)
{
        edges[i]=new int[n];
        for(int j=0;j<n;j++)
        {
            edges[i][j]=0;
        }
}
for(int i=0;i<e;i++)
   {
       cin>>sv>>ev;
       edges[sv][ev]=1;
       edges[ev][sv]=1;
   }
   int v1,v2;
   cin>>v1>>v2;
    int *visited=new int[n];
    for(int i=0;i<n;i++)
    {
        visited[i]=0;
    }
    int *parent=new int[n];
    for(int i=0;i<n;i++)
    {
        parent[i]=-1;
    }
   dfs(edges,n,visited,v1,v2,parent);
   int temp=parent[v2];
   cout<<v2<<" ";
   while(temp!=-1)
   {
       cout<<temp<<" ";
       temp=parent[temp];
   }
}
