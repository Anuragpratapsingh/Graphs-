//sHORTESt DISTANCE AND GET PATH BY BFS
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
//V1 is taken as the source or parent here
void bfs(int **edges,int n,int v1,int v2)
{
    //Here starting vertex taken as v1    
   int *visited=new int[n];
   int *distance=new int[n];
   int *parent=new int[n];
   for(int i=0;i<n;i++)
   {
       visited[i]=0;
       distance[i]=0;
        parent[i]=-1;
   }
   queue<int>q;
   q.push(v1);
   visited[v1]=1;
   parent[v1]=-1;
   distance[v1]=0;
   while(!q.empty())
   {
   //Jab pop karwa rahe tab print kar rahe
      int curr=q.front();
      q.pop();
   for(int i=0;i<n;i++)
   {
      if(visited[i]==0 && edges[curr][i]==1)
      {
      //Just taking the neighbours in queue not printing them
          q.push(i);
          visited[i]=1;
          parent[i]=curr;
          //Distance if all the adjacent connected will be the parents distance plus one
          distance[i]=distance[curr]+1;
      }
   }
   } 
   //Printing the path in reverse order
   int temp=parent[v2];
    if(temp!=-1)
    {
   cout<<v2<<" ";
    }
   while(temp!=-1)
   {
       cout<<temp<<" ";
       temp=parent[temp];
   }      
}
int main() 
{
   int n,e;
   cin>>n>>e; 
   int sv,ev; 
   int **edges=new int*[n];
for(int i=0;i<n;i++)
{
        edges[i]=new int[n];
        for(int j=0;j<n;j++)
        {
            edges[i][j]=0;
        }
}
for(int i=0;i<e;i++)
   {
       cin>>sv>>ev;
       edges[sv][ev]=1;
       edges[ev][sv]=1;
   }
   int v1,v2;
   cin>>v1>>v2;
   bfs(edges,n,v1,v2);
}
