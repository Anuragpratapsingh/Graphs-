//Kruskal Algorithm
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class graph
{
    public:
    int src;
    int dest;
    int weight;
    void print()
    {
        if(src<dest)
        {
        cout<<src<<" "<<dest<<" "<<weight<<endl;
        }
        else
        {
            cout<<dest<<" "<<src<<" "<<weight<<endl;
        }
    }
};
bool compare(graph a,graph b)
{
    //If a.weight<b.weight then okay else swap so basically increasing order sort.
        return a.weight<b.weight;
}
int main() 
{
    int n,e;
    cin>>n;
    cin>>e;
    graph *edges=new graph[e];
    int start,end,wei;
    for(int i=0;i<e;i++)
    {
        cin>>start>>end>>wei;
        edges[i].src=start;
        edges[i].dest=end;
        edges[i].weight=wei;
    }
    sort(edges,edges+e,compare);
    int *parents=new int[n];
    for(int i=0;i<n;i++)
    {
        parents[i]=i;
    }
    graph *mst=new graph[n-1];
    int count=0;
    int a,b,w;
    int i=0;
        while(count!=n-1)
        {
            
            a=edges[i].src;
            b=edges[i].dest;
            w=edges[i].weight;
            int p1,p2;
            p1=parents[a];
            p2=parents[b];
            while(p1!=parents[p1])
            {
                p1=parents[p1];
            }
             while(p2!=parents[p2])
            {
                p2=parents[p2];
            }
            if(p1!=p2)
            {
                //Cannot take i here as we might have skip some edges in our edges array.
                mst[count].src=a;
                mst[count].dest=b;
                mst[count].weight=w;
                //Connect or make any parent of the other make p1 of p2 or p2 of p1
                parents[p1]=p2;
                count++;
            }
            i++;
            if(i>e)
            {
                break;
            }
        }
    for(int i=0;i<n-1;i++)
    {
    mst[i].print();
    }
}
