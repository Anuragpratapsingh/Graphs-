//Djikshtara Algorithm
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void Djikshtara(int **edges,int n)
{
    int *visited=new int[n];
   for(int i=0;i<n;i++)
  {
    visited[i]=0;
  }
  int *distance=new int[n];
  //Taken 0 as source vertex
  distance[0]=0;
  for(int i=1;i<n;i++)
  {
      distance[i]=INT_MAX;
  }
  int mindistance=INT_MAX;
  //Index will have the index of min distance.
  int index;
  //Run the code for every vertex
  for(int k=0;k<n;k++)
  {
      for(int i=0;i<n;i++)
      {
          //Finding the vertex with min distance from the unvisted vertex.
          if(visited[i]==0&&distance[i]<mindistance)
          {
              mindistance=distance[i];
              index=i;
          }
      }
      visited[index]=1;
      //Exploring its neighbours which are unvisited
       for(int i=0;i<n;i++)
      {
          if(edges[index][i]!=0&&visited[i]==0)
          {
              if(distance[index]+edges[index][i]<distance[i])
              {
                  distance[i]=distance[index]+edges[index][i];
              }
          }
      }
      mindistance=INT_MAX;
  }
  for(int i=0;i<n;i++)
  {
      cout<<i<<" "<<distance[i]<<endl;
  }
}
int main() 
{
   int n,e;
   cin>>n>>e; 
   int sv,ev,wei; 
   int **edges=new int*[n];
for(int i=0;i<n;i++)
{
        edges[i]=new int[n];
        for(int j=0;j<n;j++)
        {
        //This is because 0 to 0 answer is 0
            edges[i][j]=0;
        }
}
for(int i=0;i<e;i++)
   {
       cin>>sv>>ev>>wei;
       edges[sv][ev]=wei;
       edges[ev][sv]=wei;
   }
   Djikshtara(edges,n);
}
   
  
     
